services:
  mongo-product-database:
    container_name: mongo-product-database
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-database
    volumes:
      - mongo-product-data:/data/db

  pg-order-database:
    container_name: pg-order-database
    image: postgres:17.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      PGDATA: /var/lib/postgresql/data # Путь, где в контейнере хранятся данные БД
    volumes:
      - ./pg-init/order-database:/docker-entrypoint-initdb.d # Папка инициализации БД проекта связан с файлом в контейнере
      - pg-order-data:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    restart: unless-stopped # Контейнер не перезагружается сам

  pg-inventory-database:
    container_name: pg-inventory-database
    image: postgres:17.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      PGDATA: /var/lib/postgresql/data # Путь, где в контейнере хранятся данные БД
    volumes:
      - ./pg-init/inventory-database:/docker-entrypoint-initdb.d # Папка инициализации БД проекта связан с файлом в контейнере
      - pg-inventory-data:/var/lib/postgresql/data
    ports:
      - "16543:5432"
    restart: unless-stopped # Контейнер не перезагружается сам

  pg-keycloak-database:
    container_name: pg-keycloak-database
    image: postgres:17.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      PGDATA: /var/lib/postgresql/data
    volumes:
      - ./pg-init/keycloak-database:/docker-entrypoint-initdb.d
      - pg-keycloak-data:/var/lib/postgresql/data
    ports:
      - "17654:5432"
    restart: unless-stopped # Контейнер не перезагружается сам

  keycloak:
    container_name: keycloak-security
    image: keycloak/keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://pg-keycloak-database:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: secret

      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin

      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    volumes:
      - keycloak-data:/opt/keycloak/data/import
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--http-port", "7080", "--https-port", "7443", "--import-realm" ]
    ports:
      - "7080:7080"
      - "7443:7443"
    depends_on:
      - pg-keycloak-database

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:7.5.0

    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
#      - schema-registry
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
#      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  pg-order-data:
  pg-inventory-data:
  mongo-product-data:
  keycloak-data:
  pg-keycloak-data: